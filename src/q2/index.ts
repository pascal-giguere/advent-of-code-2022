import { EncryptedStrategyGuide, parseInput } from './shared';
import { StrategyGuideV1, calculateStrategyGuidePointsV1, decryptStrategyGuideV1 } from './v1';
import { StrategyGuideV2, calculateStrategyGuidePointsV2, decryptStrategyGuideV2 } from './v2';

/** @returns Number of points generated by playing the provided encrypted strategy guide using "V1" decryption
 *  @param inputContents - String representing the encrypted strategy guide's contents */
export function calculateEncryptedStrategyGuidePointsV1(inputContents: string): number {
  const encryptedGuide: EncryptedStrategyGuide = parseInput(inputContents);
  const decryptedGuide: StrategyGuideV1 = decryptStrategyGuideV1(encryptedGuide);
  return calculateStrategyGuidePointsV1(decryptedGuide);
}

/** @returns Number of points generated by playing the provided encrypted strategy guide using "V2" decryption
 *  @param inputContents - String representing the encrypted strategy guide's contents */
export function calculateEncryptedStrategyGuidePointsV2(inputContents: string): number {
  const encryptedGuide: EncryptedStrategyGuide = parseInput(inputContents);
  const decryptedGuide: StrategyGuideV2 = decryptStrategyGuideV2(encryptedGuide);
  return calculateStrategyGuidePointsV2(decryptedGuide);
}
